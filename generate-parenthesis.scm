(define memo (make-table))
(table-set! memo 0 (list ""))

(define (gen-parens num)
  (let loopn ((n 0) (combos (list)))
    (if (= n num)
        combos
        (loopn (+ n 1)
               (append (let ((first (or (table-ref memo n #f) (gen-parens n)))
                             (second (or (table-ref memo (- num 1 n) #f)
                                         (gen-parens (- num 1 n)))))
                         (table-set! memo n first)
                         (table-set! memo (- num 1 n) second)
                         (let loop12 ((one first) (two second) (combos (list)))
                           (cond
                            ((null? one) combos)
                            ((null? two) (loop12 (cdr one) second combos))
                            (else (loop12 one (cdr two)
                                          (cons (string-append "(" (car one) ")" (car two))
                                                combos))))))
                       combos)))))
