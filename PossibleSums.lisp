(defun possible-sums (coins quants)
  (let* ((*seen* '())) 
    (mapcar #'(lambda (pair)
                (let ((coin (first pair))
                      (quant (second pair)))
                  (mapcar  #'(lambda (amount)
                               (mapcar #'(lambda (part)
                                           (+ amount part))
                                       (loop for part from 0 below (1+ (* coin quant)) by coin
                                             collect part)))
                           *seen*)))
            (mapcar #'list coins quants))
    (1- (length *seen*))))
